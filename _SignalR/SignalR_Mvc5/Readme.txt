
1. In Visual Studio, create a C# ASP.NET application that targets .NET Framework 4.5, name it SignalRChat, and click OK.
2. In the New ASP.NET Project dialog, and select MVC, and click Change Authentication.
3.	Select No Authentication in the Change Authentication dialog, and click OK.
	Note: If you select a different authentication provider for your application, a Startup.cs class will be created for you; 
		you will not need to create your own Startup.cs class in step 10 below.
4. Click OK in the New ASP.NET Project dialog.
5.    install-package Microsoft.AspNet.SignalR
6.	In Solution Explorer, expand the Scripts folder. Note that script libraries for SignalR have been added to the project.
7. In Solution Explorer, right-click the project, select Add | New Folder, and add a new folder named Hubs.
8. Right-click the Hubs folder, click Add | New Item, select the Visual C# | Web | SignalR node in the Installed pane, 
	select SignalR Hub Class (v2) from the center pane, and create a new hub named ChatHub.cs. 
	You will use this class as a SignalR server hub that sends messages to all clients.
9.	Replace the code in the ChatHub class with the following code.

using System;
using System.Web;
using Microsoft.AspNet.SignalR;
namespace SignalRChat
{
    public class ChatHub : Hub
    {
        public void Send(string name, string message)
        {
            // Call the addNewMessageToPage method to update clients.
            Clients.All.addNewMessageToPage(name, message);
        }
    }
}

10. Create a new class called Startup.cs. Change the contents of the file to the following.

using Owin;
using Microsoft.Owin;
[assembly: OwinStartup(typeof(SignalRChat.Startup))]
namespace SignalRChat
{
    public class Startup
    {
        public void Configuration(IAppBuilder app)
        {
            // Any connection or hub wire up and configuration should go here
            app.MapSignalR();
        }
    }
}

11. Edit the HomeController class found in Controllers/HomeController.cs and add the following method to the class. This method returns the Chat view that you will create in a later step.

public ActionResult Chat()
{
    return View();
}

12. Right-click the Views/Home folder, and select Add... | View.

13. In the Add View dialog, name the new view Chat.

14. Replace the contents of Chat.cshtml with the following code.
    Important: When you add SignalR and other script libraries to your Visual Studio project, the Package Manager might install 
					a version of the SignalR script file that is more recent than the version shown in this topic. Make sure that 
					the script reference in your code matches the version of the script library installed in your project.

@{
    ViewBag.Title = "Chat";
}
<h2>Chat</h2>
<div class="container">
    <input type="text" id="message" />
    <input type="button" id="sendmessage" value="Send" />
    <input type="hidden" id="displayname" />
    <ul id="discussion">
    </ul>
</div>
@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.1.0.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.--> 
    <script>
        $(function () {
            // Reference the auto-generated proxy for the hub.  
            var chat = $.connection.chatHub;
            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (name, message) {
                // Add the message to the page. 
                $('#discussion').append('<li><strong>' + htmlEncode(name) 
                    + '</strong>: ' + htmlEncode(message) + '</li>');
            };
            // Get the user name and store it to prepend to messages.
            $('#displayname').val(prompt('Enter your name:', ''));
            // Set initial focus to message input box.  
            $('#message').focus();
            // Start the connection.
            $.connection.hub.start().done(function () {
                $('#sendmessage').click(function () {
                    // Call the Send method on the hub. 
                    chat.server.send($('#displayname').val(), $('#message').val());
                    // Clear text box and reset focus for next comment. 
                    $('#message').val('').focus();
                });
            });
        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    </script>
}

15. Save All for the project.


Run the Sample
http://localhost:5821/home/chat

